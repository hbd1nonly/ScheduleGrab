// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bfi.schedulegrab.controller;

import com.bfi.schedulegrab.controller.StoreSalesDataController;
import com.bfi.schedulegrab.domain.StoreSalesData;
import com.bfi.schedulegrab.service.StoreSalesDataService;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect StoreSalesDataController_Roo_Controller {
    
    @Autowired
    StoreSalesDataService StoreSalesDataController.storeSalesDataService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String StoreSalesDataController.create(@Valid StoreSalesData storeSalesData, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, storeSalesData);
            return "storesalesdatas/create";
        }
        uiModel.asMap().clear();
        storeSalesDataService.saveStoreSalesData(storeSalesData);
        return "redirect:/storesalesdatas/" + encodeUrlPathSegment(storeSalesData.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String StoreSalesDataController.createForm(Model uiModel) {
        populateEditForm(uiModel, new StoreSalesData());
        return "storesalesdatas/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String StoreSalesDataController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("storesalesdata", storeSalesDataService.findStoreSalesData(id));
        uiModel.addAttribute("itemId", id);
        return "storesalesdatas/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String StoreSalesDataController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("storesalesdatas", storeSalesDataService.findStoreSalesDataEntries(firstResult, sizeNo));
            float nrOfPages = (float) storeSalesDataService.countAllStoreSalesDatas() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("storesalesdatas", storeSalesDataService.findAllStoreSalesDatas());
        }
        return "storesalesdatas/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String StoreSalesDataController.update(@Valid StoreSalesData storeSalesData, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, storeSalesData);
            return "storesalesdatas/update";
        }
        uiModel.asMap().clear();
        storeSalesDataService.updateStoreSalesData(storeSalesData);
        return "redirect:/storesalesdatas/" + encodeUrlPathSegment(storeSalesData.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String StoreSalesDataController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, storeSalesDataService.findStoreSalesData(id));
        return "storesalesdatas/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String StoreSalesDataController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        StoreSalesData storeSalesData = storeSalesDataService.findStoreSalesData(id);
        storeSalesDataService.deleteStoreSalesData(storeSalesData);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/storesalesdatas";
    }
    
    void StoreSalesDataController.populateEditForm(Model uiModel, StoreSalesData storeSalesData) {
        uiModel.addAttribute("storeSalesData", storeSalesData);
    }
    
    String StoreSalesDataController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
